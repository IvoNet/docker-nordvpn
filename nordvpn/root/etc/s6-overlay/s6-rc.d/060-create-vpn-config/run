#!/command/with-contenv python

import getopt
import json
import os
import random
import sys
from shutil import copyfile

import IvoNet

__author__ = "Ivo Woltring"
__copyright__ = "Copyright (c) 2019-2025 Ivo Woltring"
__license__ = "Apache 2.0"

CONFIG_FILE = "/vpn/config.ovpn"

ISO_CODES = (
    'AD' 'AE' 'AF' 'AG' 'AI' 'AL' 'AM' 'AO' 'AQ' 'AR' 'AS' 'AT' 'AU' 'AW' 'AX'
    'AZ' 'BA' 'BB' 'BD' 'BE' 'BF' 'BG' 'BH' 'BI' 'BJ' 'BL' 'BM' 'BN' 'BO' 'BQ'
    'BR' 'BS' 'BT' 'BV' 'BW' 'BY' 'BZ' 'CA' 'CC' 'CD' 'CF' 'CG' 'CH' 'CI' 'CK'
    'CL' 'CM' 'CN' 'CO' 'CR' 'CU' 'CV' 'CW' 'CX' 'CY' 'CZ' 'DE' 'DJ' 'DK' 'DM'
    'DO' 'DZ' 'EC' 'EE' 'EG' 'EH' 'ER' 'ES' 'ET' 'FI' 'FJ' 'FK' 'FM' 'FO' 'FR'
    'GA' 'GB' 'GD' 'GE' 'GF' 'GG' 'GH' 'GI' 'GL' 'GM' 'GN' 'GP' 'GQ' 'GR' 'GS'
    'GT' 'GU' 'GW' 'GY' 'HK' 'HM' 'HN' 'HR' 'HT' 'HU' 'ID' 'IE' 'IL' 'IM' 'IN'
    'IO' 'IQ' 'IR' 'IS' 'IT' 'JE' 'JM' 'JO' 'JP' 'KE' 'KG' 'KH' 'KI' 'KM' 'KN'
    'KP' 'KR' 'KW' 'KY' 'KZ' 'LA' 'LB' 'LC' 'LI' 'LK' 'LR' 'LS' 'LT' 'LU' 'LV'
    'LY' 'MA' 'MC' 'MD' 'ME' 'MF' 'MG' 'MH' 'MK' 'ML' 'MM' 'MN' 'MO' 'MP' 'MQ'
    'MR' 'MS' 'MT' 'MU' 'MV' 'MW' 'MX' 'MY' 'MZ' 'NA' 'NC' 'NE' 'NF' 'NG' 'NI'
    'NL' 'NO' 'NP' 'NR' 'NU' 'NZ' 'OM' 'PA' 'PE' 'PF' 'PG' 'PH' 'PK' 'PL' 'PM'
    'PN' 'PR' 'PS' 'PT' 'PW' 'PY' 'QA' 'RE' 'RO' 'RS' 'RU' 'RW' 'SA' 'SB' 'SC'
    'SD' 'SE' 'SG' 'SH' 'SI' 'SJ' 'SK' 'SL' 'SM' 'SN' 'SO' 'SR' 'SS' 'ST' 'SV'
    'SX' 'SY' 'SZ' 'TC' 'TD' 'TF' 'TG' 'TH' 'TJ' 'TK' 'TL' 'TM' 'TN' 'TO' 'TR'
    'TT' 'TV' 'TW' 'TZ' 'UA' 'UG' 'UK' 'UM' 'US' 'UY' 'UZ' 'VA' 'VC' 'VE' 'VG'
    'VI' 'VN' 'VU' 'WF' 'WS' 'YE' 'YT' 'ZA' 'ZM' 'ZW'
)


def check_candidate_files_exist(candidates):
    """
    Checks if the physical ovpn file exists
    """
    protocol = IvoNet.environment('PROTOCOL', "tcp/udp").lower()
    print("Filtering in protocol %s..." % protocol)
    ret = []
    for candidate in candidates:
        tcp = None
        udp = None
        if "tcp" in protocol:
            tcp = os.path.join(IvoNet.ovpn_tpc_dir(), candidate + ".tcp.ovpn")
        if "udp" in protocol:
            udp = os.path.join(IvoNet.ovpn_udp_dir(), candidate + ".udp.ovpn")
        if tcp and os.path.isfile(tcp):
            ret.append(tcp)
        if udp and os.path.isfile(udp):
            ret.append(udp)
    return ret


def process(location, server, max_load):
    """
    This process will retrieve a server json from NordVPN with all the servers available and
    filter them on the max_load provided. Servers still in the list must have less than the max_load
    percentage.
    The list will be filtered again on the location if provided so that only the list based on location
    and max_load will be left.
    Just to be sure the physical ovpn files match the servers gotten from the endpoint
    As a last step a random server will be chosen from that list and the configuration will be adjusted accordingly.

    :param location: ISO code as location
    :param server: desired server name to connect
    :param max_load: the max load percentage allowed
    :return:
    """

    response = IvoNet.url_get(IvoNet.api_server_stats())
    if response is None:
        print("Can not retrieve server stats at this time.")
        sys.exit(1)

    servers = json.loads(response)

    global_candidates = [server['hostname'] for server in servers if server['load'] < max_load]
    if global_candidates:
        print("Servers found with less than %s capacity" % max_load)
    else:
        print("No servers found with a load less then %s capacity :(" % max_load)
        sys.exit(1)

    if location:
        candidates = [server for server in global_candidates if server.startswith(location.lower())]
        if candidates:
            print("Valid location-based server candidates found.")
        else:
            print("No valid location-based servers found that adhere to the max capacity. Falling back to the global server candidates.")
            candidates = global_candidates
    else:
        candidates = global_candidates

    candidates = check_candidate_files_exist(candidates)
    if not candidates:
        print("No servers found :(")
        sys.exit(1)

    print("Found %s servers." % len(candidates))

    secure_random = random.SystemRandom()
    choice = secure_random.choice(candidates)
    print("Randomly chosen: %s" % os.path.split(choice)[1])

    if server:
        print("Choosing %s... from %d servers" % (server, len(candidates)))
        substr = server + '.'
        candidates = [c for c in candidates if substr in c]
        if len(candidates) == 0:
            print('Cannot find given server on candidates.')
            sys.exit(1)
        elif len(candidates) > 1:
            print('Given server name is ambiguous: %s' % str(candidates))
            sys.exit(1)
        choice = candidates[0]
        print('Chosen: %s' % os.path.split(choice)[1])
    if choice:
        copyfile(choice, CONFIG_FILE)

    if os.path.isfile(CONFIG_FILE):
        config = open(CONFIG_FILE, "r").read()

        with open(CONFIG_FILE, "w") as conf:
            config = config.replace("ping-restart 0", "ping-restart 120")
            conf.write(config)
            conf.write('\npull-filter ignore "auth-token"')
            conf.write("\nscript-security 2")
            conf.write("\nup /etc/openvpn/up.sh")
            conf.write("\ndown /etc/openvpn/down.sh")
            conf.write("\n")
    else:
        print("No config file found :(")
        sys.exit(1)


def usage():
    print("Usage: %s [-h] [-l location] [-m max_load] [-s server] [-v]" % sys.argv[0])



def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hl:m:n:vs:", ["help", "location=", "max_load=", "server=", "verbose"])
    except getopt.GetoptError as err:
        print(err)
        sys.exit(2)
    max_load = None
    location = None
    server = None
    for o, a in opts:
        if o in ("-v", "--verbose"):
            global verbose
            verbose = True
        elif o in ("-h", "--help"):
            usage()
            sys.exit(0)
        elif o in ("-l", "--location"):
            if a.upper() in ISO_CODES:
                location = a.lower()
            else:
                print("ISO_CODE [%s] not recognised." % a)
                sys.exit(2)
        elif o in ("-s", "--server"):
            server = a.lower()
        elif o in ("-m", "--max_load"):
            try:
                max_load = int(a)
            except TypeError:
                print("-c option should be followed by a number.")
                sys.exit(1)
        else:
            assert False, "unhandled option"
    if not server:
        try:
            server = os.environ["SERVER"]
        except KeyError:
            server = None
    if not location:
        try:
            location = os.environ["LOCATION"]
        except KeyError:
            location = None

    if not max_load:
        try:
            max_load = int(os.environ["MAX_LOAD"])
        except KeyError:
            max_load = 30

    process(location, server, max_load)


if __name__ == "__main__":
    main()
