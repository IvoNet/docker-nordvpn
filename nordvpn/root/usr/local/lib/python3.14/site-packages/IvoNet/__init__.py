# -*- coding: utf-8; Mode: Python; tab-width: 4 -*-
__doc__ = """IvoNet tools.
  This package will contain my own personal tools.
  I will try to write the stuff in this package with re-use in mind.
  methods I find especially useful will be made available through this __init__.py
  Otherwise import it from the library...
"""
import os
import random
import zipfile

import requests

try:
    from urllib import urlopen
except ImportError:
    from urllib.request import urlopen

__author__ = "Ivo Woltring"
__copyright__ = "Copyright (c) 2019-2025 Ivo Woltring"
__license__ = "Apache 2.0"


BROWSERS = [
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:91.0) Gecko/20100101 Firefox/91.0",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Brave/1.29.81 Chrome/92.0.4515.131 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36 OPR/77.0.4054.172"
]

def unzip(url, location):
    try:
        from StringIO import StringIO as nio
    except ImportError:
        from io import BytesIO as nio
    fo = zipfile.ZipFile(nio(urlopen(url).read()), 'r')
    fo.extractall(location)
    fo.close()


def url_get(url):
    headers = {
        "User-Agent": random.choice(BROWSERS)
    }
    try:
        response = requests.get(url, headers=headers)
        if response.status_code != 200:
            print("Failed to get: " + url)
            print("Status code: %s" % response.status_code)
            return None
        return response.text
    except requests.exceptions.ConnectionError as e:
        print("Failed to get: " + url)
        print("Error: %s" % e)
        return None


def has_files(foldername):
    return len(os.listdir(foldername)) == 0


def has_ext(foldername, ends_with=".ovpn"):
    try:
        return any(fname.endswith(ends_with) for fname in os.listdir(foldername))
    except FileNotFoundError:
        return False


def environment(key, default):
    try:
        return os.environ[key]
    except KeyError:
        return default


def ovpn_dir():
    return environment("OVPN_DIR", "/ovpn")


def ovpn_tpc_dir():
    return ovpn_dir() + "/ovpn_tcp"


def ovpn_udp_dir():
    return ovpn_dir() + "/ovpn_udp"


def ovpn_url():
    return environment("URL_OVPN_FILES", "https://downloads.nordcdn.com/configs/archives/servers/ovpn.zip")


def api_server_stats():
    return environment("API_SERVER_STATS", "https://api.nordvpn.com/v1/servers?limit=0")


def create_folder(folder):
    try:
        os.mkdir(folder)
    except OSError:
        pass




